package Pacman.Model;

import java.io.Serializable;
import java.util.Date;

import Pacman.PacMan;
import Pacman.lib.*;

/**
 * The model. The game class holds the map, player and ghosts.
 */
public final class Game implements Serializable {
	/**
	 * Generated by Eclipse.
	 */
	private static final long serialVersionUID = -7882479042847476243L;
	
	/**
	 * This controls how long the special item mode will last once activated.
	 */
	private static final int specialItemTimer = 5000;

	/**
	 * This holds the state of the game.
	 */
	private GameState state;

	/**
	 * How many points the player has scored so far.
	 */
	private int score;

	/**
	 * The map, containing all the MapBlocks.
	 */
	private Map map;

	/**
	 * Once the player eats dots, the map is altered. After the game is finished,
	 * the originalMap needs to be restored.
	 */
	private Map originalMap;

	/**
	 * The player object.
	 */
	private Player player;

	/**
	 * The ghosts.
	 */
	private Ghost[] ghosts;

	/**
	 * Stores whether special item mode is activated.
	 */
	private boolean specialItemMode;

	/**
	 * Stores the point in time when the special item mode will be deactivated.
	 */
	private Date specialItemTimeOut;

	/**
	 * default constructor. creates a new game with default values. saved games
	 * can be restored using the other constructor.
	 */
	public Game() {
		map = new Map();
		init();
	}

	/**
	 * (Re)initializes the parts of the game that may have changed during previous games, therefore this does not happen in the constructor.
	 */
	public void init() {
		int ghostCount = map.getGhostCount();
		ghosts = new Ghost[ghostCount];
		for (int i = 0; i < ghostCount; i++) {
			ghosts[i] = new Ghost();
			ghosts[i].setPosition(map.getGhostSpawnVector());
			ghosts[i].setGhostType(i);
		}

		player = new Player();
		player.setPosition(map.getPlayerSpawnVector());

		resetScore();
		specialItemMode = false;

		if (originalMap != null)
			restoreOriginalMap();
		map.computeDotsLeft();
	}

	/**
	 * Start the game. This also starts the game characters.
	 */
	public void start() {
		if (state != GameState.GAME_PAUSED) {
			storeOriginalMap();
			for (int i = 0; i < ghosts.length; i++) {
				ghosts[i].setPosition(map.getGhostSpawnVector());
			}
		}
		map.computeDotsLeft();
		PacMan.getGame().setGameState(GameState.GAME_RUNNING);
		for (int i = 0; i < getGhosts().length; i++) {
			getGhosts()[i].startCharacter();
		}
		getPlayer().startCharacter();
	}


	/**
	 * Stops/Pauses the game, so it can be resumed later
	 */
	public void stop() {
		PacMan.getGame().setGameState(GameState.GAME_PAUSED);
		for (int i = 0; i < ghosts.length; i++) {
			ghosts[i].stop();
		}
		player.stop();
	}

	/**
	 * To load new levels.
	 */
	public void setMap(Map newMap) {
		map = newMap;
		ghosts = null;
		player = null;
		init();
	}

	/**
	 * Sets the game state. 
	 * 
	 * @param newState
	 *            The GameState to set.
	 */
	public void setGameState(GameState newState) {
		state = newState;
	}

	/**
	 * Sets {@link Game#originalMap}
	 */
	public void setOriginalMap(Map newOriginalMap) {
		originalMap = newOriginalMap;
	}

	/**
	 * Gets {@link Game#map}
	 */
	public Map getMap() {
		return map;
	}

	/**
	 * Gets {@link Game#state}.
	 */
	public GameState getGameState() {
		return state;
	}

	/**
	 * Gets {@link Game#player}.
	 */
	public Player getPlayer() {
		return player;
	}


	/**
	 * Gets {@link Game#ghosts}.
	 */
	public Ghost[] getGhosts() {
		return ghosts;
	}

	/**
	 * Checks whether {@link Game#specialItemMode} is active. If the time limit has been reached, special item mode is deactivated.
	 */
	public boolean getSpecialItemMode() {
		Date now = new Date();
		if (specialItemMode && now.after(specialItemTimeOut)) {
			specialItemMode = false;
			System.out.println("Special item mode deactivated.");
			return false;
		}
		else
			return specialItemMode;
	}

	/**
	 * Gets {@link Game#score}.
	 */
	public int getScore() {
		return this.score;
	}

	/**
	 * Adds a provided amount of points to {@link Game#score}.
	 *
	 * @param n Number of points to add.
	 */
	void addScore(int n) {
		this.score += n;
	}

	/**
	 * Enables special item mode. This also sets the time limit.
	 */
	void enableSpecialItem() {
		long timeOut = (new Date()).getTime() + Game.specialItemTimer;
		specialItemTimeOut = new Date(timeOut);
		specialItemMode = true;
		System.out.println("Special item mode activated.");
	}

	/**
	 * Ends the game by stopping all the game characters and changing the game state.
	 */
	void gameOver() {
		this.stop();
		for (int i = 0; i < this.getGhosts().length; i++)
			this.getGhosts()[i].stop();
		this.getPlayer().stop();
		state = GameState.GAME_FINISHED;
		if (this.getMap().getDotsLeft() == 0)
			System.out.println("You won! Final Score: " + score);
		else
			System.out.println("Game Over. Final Score: " + score);
	}

	/**
	 * Sets {@link Game#score} to 0.
	 */
	private void resetScore() {
		this.score = 0;
	}

	/**
	 * Restore {@link Game#map} to {@link Game#originalMap},
	 * so the eaten dots aren't gone for the next game.
	 */
	private void restoreOriginalMap() {
		map = new Map(originalMap);
	}

	/**
	 * Stores the value of {@link Game#map} into {@link Game#originalMap},
	 * so it can be retrieved later.
	 */
	private void storeOriginalMap() {
		originalMap = new Map(map);
	}

}
