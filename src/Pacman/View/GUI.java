package Pacman.View;

import java.awt.image.BufferedImage;

import javax.imageio.ImageIO;
import javax.swing.ButtonGroup;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JButton;
import javax.swing.JToggleButton;
import javax.swing.WindowConstants;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.JOptionPane;

import Pacman.PacMan;
import Pacman.Model.MapBlock;
import Pacman.Model.MapBlocks.*;
import Pacman.lib.DialogType;
import Pacman.lib.GameState;

/**
 * The view. This class manages the window including the buttons and the drawing of the graphics-panel.
 */
public class GUI extends JFrame implements Runnable, GUIInterface {
	/**
	 * This controls how big a mapblock is (the width/height of a grid-space in pixels)
	 */
	public static final int gridSize = 24;

	// the buttons:

	/**
	 * Start button starts the game. It can also function as a pause button.
	 */
	private JButton startButton;

	/**
	 * Stop button stops the game.
	 */
	private JButton stopButton;

	/**
	 * Toggles the editor.
	 */
	private JButton editorButton;

	/**
	 * to save the game or map, depending on state.
	 */
	private JButton saveButton;

	/**
	 * to load the game or map, depending on state.
	 */
	private JButton loadButton;

	// the tool buttons:

	/**
	 * Selects <em>Dot</em> as the current tool.
	 */
	private JToggleButton toolButtonDot;

	/**
	 * Selects <em>Special</em> as the current tool.
	 */
	private JToggleButton toolButtonSpecial;

	/**
	 * Selects <em>Wall</em> as the current tool.
	 */
	private JToggleButton toolButtonWall;

	/**
	 * Selects <em>Empty</em> as the current tool.
	 */
	private JToggleButton toolButtonEmpty;

	/**
	 * Selects <em>GhostSpawn</em> as the current tool.
	 */
	private JToggleButton toolButtonGhostSpawn;

	/**
	 * Selects <em>PlayerSpawn</em> as the current tool.
	 */
	private JToggleButton toolButtonPlayerSpawn;

	// the JPanel thingy

	/**
	 * The panel that will display the game board.
	 */
	private GraphicsPanel graphicsPanel;


	//the images
	private BufferedImage playerImage;
	private BufferedImage dotImage;
	private BufferedImage emptyImage;
	private BufferedImage specialImage;
	private BufferedImage wallImage;
	private BufferedImage[] ghostImage;
	private BufferedImage ghostImageSpecial;
	private BufferedImage ghostImageDead;

	/**
	 * stores the previous state of the model
	 */
	private GameState oldState;



	/**
	 * Generated by Eclipse
	 */
	private static final long serialVersionUID = 1524894064265063998L;

	/**
	 * Initializes the view. This will add all the buttons and start the thread that will draw the panel.
	 */
	public GUI() {
		loadImages();

		setSize(504, 405);
		// width:  16*24 + 120 + 12
		// height: 16*24 + 12
		setLayout(null);
		setResizable(false);

		setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE); //exit Application when Window is closed.

		setTitle("PacMan Lite (Beta)");

		startButton = new JButton("Start");
		stopButton  = new JButton("Stop");
		editorButton= new JButton("Level Editor");
		saveButton  = new JButton("Save Game");
		loadButton  = new JButton("Load Game");

		toolButtonDot         = new JToggleButton("Dot", true);
		toolButtonSpecial     = new JToggleButton("Special");
		toolButtonWall        = new JToggleButton("Wall");
		toolButtonEmpty       = new JToggleButton("Empty");
		toolButtonGhostSpawn  = new JToggleButton("GhostSpawn");
		toolButtonPlayerSpawn = new JToggleButton("PlayerSpawn");


		startButton.setBounds( 0, 00, 120, 20);
		stopButton.setBounds(  0, 20, 120, 20);
		editorButton.setBounds(0, 40, 120, 20);
		saveButton.setBounds(  0, 60, 120, 20);
		loadButton.setBounds(  0, 80, 120, 20);

		toolButtonDot.setBounds(0, 120, 120, 20);
		toolButtonSpecial.setBounds(0, 140, 120, 20);
		toolButtonWall.setBounds(0, 160, 120, 20);
		toolButtonEmpty.setBounds(0, 180, 120, 20);
		toolButtonGhostSpawn.setBounds(0, 200, 120, 20);
		toolButtonPlayerSpawn.setBounds(0, 220, 120, 20);


		toolButtonDot.setVisible(false);
		toolButtonSpecial.setVisible(false);
		toolButtonWall.setVisible(false);
		toolButtonEmpty.setVisible(false);
		toolButtonGhostSpawn.setVisible(false);
		toolButtonPlayerSpawn.setVisible(false);

		add(startButton);
		add(stopButton);
		add(editorButton);
		add(saveButton);
		add(loadButton);

		add(toolButtonDot);
		add(toolButtonSpecial);
		add(toolButtonWall);
		add(toolButtonEmpty);
		add(toolButtonGhostSpawn);
		add(toolButtonPlayerSpawn);

		ButtonGroup group = new ButtonGroup();
		group.add(toolButtonDot);
		group.add(toolButtonSpecial);
		group.add(toolButtonWall);
		group.add(toolButtonEmpty);
		group.add(toolButtonGhostSpawn);
		group.add(toolButtonPlayerSpawn);

		// the JPanel thingy
		graphicsPanel = new GraphicsPanel();
		graphicsPanel.setBounds(120, 0, 384, 384);
		graphicsPanel.setFocusable(true);
		graphicsPanel.addKeyListener(new KeyboardListener());

		add(graphicsPanel);
		graphicsPanel.requestFocus();

		ButtonListener buttonListener = new ButtonListener(this);

		startButton.addActionListener(buttonListener);
		stopButton.addActionListener(buttonListener);
		editorButton.addActionListener(buttonListener);
		saveButton.addActionListener(buttonListener);
		loadButton.addActionListener(buttonListener);

		toolButtonDot.addActionListener(buttonListener);
		toolButtonSpecial.addActionListener(buttonListener);
		toolButtonWall.addActionListener(buttonListener);
		toolButtonEmpty.addActionListener(buttonListener);
		toolButtonGhostSpawn.addActionListener(buttonListener);
		toolButtonPlayerSpawn.addActionListener(buttonListener);

		oldState = GameState.MENU;
	}

	/**
	 * Display a dialog box to the user.
	 */
	public void alert(String message, String title) {
		JOptionPane.showConfirmDialog(this, message, title, JOptionPane.DEFAULT_OPTION);
	}

	/**
	 * The {@code run} method for the {@link Runnable} interface.
	 */
	@Override
	public void run() {
		while (true) {
			if(oldState != PacMan.getGame().getGameState()) {
				updateGameState(oldState);
			}
	
			graphicsPanel.repaint();
			try {
				Thread.sleep(25);
			} catch (Exception e) {
				System.err.println("Sleep interrupted");
			}
		}
	}

	/**
	 * This prompts the user to provide a file name. In our case this happens through a file-dialog-window.
	 */
	public String getFilename( DialogType dialogType ){
		JFileChooser fc = new JFileChooser();
		int fcState = -1;
		String extension = "";
		switch(dialogType){
			case OPEN_GAME:
				fc.setFileFilter(new FileNameExtensionFilter("PacMan-Spielstand (.pmg)","pmg"));
				fc.removeChoosableFileFilter(fc.getAcceptAllFileFilter());
				fcState = fc.showOpenDialog(this);
				break;
			case OPEN_MAP:
				fc.setFileFilter(new FileNameExtensionFilter("PacMan-Level (.map)","map"));
				fc.removeChoosableFileFilter(fc.getAcceptAllFileFilter());
				fcState = fc.showOpenDialog(this);
				break;
			case SAVE_GAME:
				fc.setFileFilter(new FileNameExtensionFilter("PacMan-Spielstand (.pmg)","pmg"));
				fc.removeChoosableFileFilter(fc.getAcceptAllFileFilter());
				fcState = fc.showSaveDialog(this);
				extension = ".pmg";
				break;
			case SAVE_MAP:
				fc.setFileFilter(new FileNameExtensionFilter("PacMan-Level (.map)","map"));
				fc.removeChoosableFileFilter(fc.getAcceptAllFileFilter());
				fcState = fc.showSaveDialog(this);
				extension = ".map";
				break;
			default:
				fcState = JFileChooser.ERROR_OPTION;
				break;
	
		}
		switch(fcState) {
			case JFileChooser.APPROVE_OPTION:
				String filename = fc.getSelectedFile().getPath();
				if(extension!= "" && !filename.toLowerCase().endsWith(extension)) 
					filename += extension;
				return filename;
	
			default:
				return "";
		}
	
	}

	/*
	 * button getters
	 */
	JButton getStartButton() {
		return startButton;
	}

	JButton getStopButton() {
		return stopButton;
	}

	JButton getEditorButton() {
		return editorButton;
	}

	JButton getLoadButton() {
		return loadButton;
	}

	JButton getSaveButton() {
		return saveButton;
	}

	JToggleButton getToolButtonDot() {
		return toolButtonDot;
	}

	JToggleButton getToolButtonSpecial() {
		return toolButtonSpecial;
	}

	JToggleButton getToolButtonWall() {
		return toolButtonWall;
	}

	JToggleButton getToolButtonEmpty() {
		return toolButtonEmpty;
	}

	JToggleButton getToolButtonGhostSpawn() {
		return toolButtonGhostSpawn;
	}

	JToggleButton getToolButtonPlayerSpawn() {
		return toolButtonPlayerSpawn;
	}

	/**
	 * @return the playerImage
	 */
	 BufferedImage getPlayerImage() {
		return playerImage;
	}


	/**
	 * @return the dotImage
	 */
	BufferedImage getDotImage() {
		return dotImage;
	}

	/**
	 * @return the emptyImage
	 */
	BufferedImage getEmptyImage() {
		return emptyImage;
	}

	/**
	 * @return the specialImage
	 */
	BufferedImage getSpecialImage() {
		return specialImage;
	}

	/**
	 * @return the wallImage
	 */
	BufferedImage getWallImage() {
		return wallImage;
	}


	/**
	 * @return the ghostImage
	 */
	BufferedImage[] getGhostImage() {
		return ghostImage;
	}

	/**
	 * @return the ghostImageSpecial
	 */
	BufferedImage getGhostImageSpecial() {
		return ghostImageSpecial;
	}

	/**
	 * @return the ghostImageDead
	 */
	BufferedImage getGhostImageDead() {
		return ghostImageDead;
	}


	/**
	 * @return mapBlockImage depending on type of provided MapBlock
	 */
	BufferedImage getMapBlockImage(MapBlock mb) {
		if(Dot.class.isInstance(mb)) return dotImage;
		if(Empty.class.isInstance(mb)) return emptyImage;
		if(Special.class.isInstance(mb)) return specialImage;
		if(Wall.class.isInstance(mb)) return wallImage;
		return null;
	}

	/**
	 * @param playerImage the playerImage to set
	 */
	private void setPlayerImage(BufferedImage playerImage) {
		this.playerImage = playerImage;
	}

	/**
	 * @param ghostImageSpecial the ghostImageSpecial to set
	 */
	private void setGhostImageSpecial(BufferedImage ghostImageSpecial) {
		this.ghostImageSpecial = ghostImageSpecial;
	}

	/**
	 * @param ghostImageDead the ghostImageDead to set
	 */
	private void setGhostImageDead(BufferedImage ghostImageDead) {
		this.ghostImageDead = ghostImageDead;
	}

	/**
	 * @param dotImage the dotImage to set
	 */
	private void setDotImage(BufferedImage dotImage) {
		this.dotImage = dotImage;
	}

	/**
	 * @param emptyImage the emptyImage to set
	 */
	private void setEmptyImage(BufferedImage emptyImage) {
		this.emptyImage = emptyImage;
	}

	/**
	 * @param specialImage the specialImage to set
	 */
	private void setSpecialImage(BufferedImage specialImage) {
		this.specialImage = specialImage;
	}

	/**
	 * @param wallImage the wallImage to set
	 */
	private void setWallImage(BufferedImage wallImage) {
		this.wallImage = wallImage;
	}

	/**
	 * @param ghostImage the ghostImages to set
	 * @param index Index in {@link #ghostImage}.
	 */
	private void setGhostImage(BufferedImage ghostImage, int index) {
		try { this.ghostImage[index] = ghostImage; } catch (Exception e) {System.err.println("Error loading image.");}
	}

	/**
	 * Load all the images into their corresponding instance variables, so they can be drawn.
	 */
	private void loadImages() {		
		try { setDotImage(ImageIO.read(getClass().getClassLoader().getResource("images/dot.png"))); } catch (Exception e) { System.err.println("Error loading image");	}
		try { setEmptyImage(ImageIO.read(getClass().getClassLoader().getResource("images/empty.png"))); } catch (Exception e) { System.err.println("Error loading image");	}
		try { setSpecialImage(ImageIO.read(getClass().getClassLoader().getResource("images/special.png"))); } catch (Exception e) { System.err.println("Error loading image");	}
		try { setWallImage(ImageIO.read(getClass().getClassLoader().getResource("images/wall.png"))); } catch (Exception e) { System.err.println("Error loading image");	}
		try { setPlayerImage(ImageIO.read(getClass().getClassLoader().getResource("images/player.png"))); } catch (Exception e) { System.err.println("Error loading image");	}
		try { setGhostImageSpecial(ImageIO.read(getClass().getClassLoader().getResource("images/ghost_special.png"))); } catch (Exception e) { System.err.println("Error loading image");	}
		try { setGhostImageDead(ImageIO.read(getClass().getClassLoader().getResource("images/ghost_dead.png"))); } catch (Exception e) { System.err.println("Error loading image");	}
	
		
		int ghostCount = PacMan.getGame().getMap().getGhostCount();
		ghostImage = new BufferedImage[ghostCount];
		for(int i = 0; i<ghostCount; i++) {
			try { setGhostImage(ImageIO.read(getClass().getClassLoader().getResource("images/ghost" + (i + 1) + ".png")),i); } catch (Exception e) { System.err.println("Error loading image");	}
		}
	}

	/**
	 * To be called when the game state changes. Refreshes enabled buttons and captions.
	 * @param oldState The previous GameState. 
	 */
	private void updateGameState(GameState oldState) {
		GameState state = PacMan.getGame().getGameState();
		if(state == GameState.EDITOR) {
			getToolButtonDot().setVisible(true);
			getToolButtonEmpty().setVisible(true);
			getToolButtonGhostSpawn().setVisible(true);
			getToolButtonPlayerSpawn().setVisible(true);
			getToolButtonSpecial().setVisible(true);
			getToolButtonWall().setVisible(true);
	
			getStartButton().setEnabled(false);
			getStopButton().setEnabled(false);
	
			getEditorButton().setText("Exit Editor");
			getSaveButton().setText("Save Level");
			getLoadButton().setText("Load Level");
	
			setTitle("PacMan Lite - EDITOR");			
		}else if(oldState == GameState.EDITOR){
			getToolButtonDot().setVisible(false);
			getToolButtonEmpty().setVisible(false);
			getToolButtonGhostSpawn().setVisible(false);
			getToolButtonPlayerSpawn().setVisible(false);
			getToolButtonSpecial().setVisible(false);
			getToolButtonWall().setVisible(false);
	
			getStartButton().setEnabled(true);
			getStopButton().setEnabled(true);
	
			getEditorButton().setText("Level Editor");
			getSaveButton().setText("Save Game");
			getLoadButton().setText("Load Game");
	
			setTitle("PacMan Lite");
		}
	
	
		if(state == GameState.GAME_RUNNING) {
			focusGraphicsPanel();
	
			getSaveButton().setEnabled(false);
			getLoadButton().setEnabled(false);
			getEditorButton().setEnabled(false);
	
			getStartButton().setText("Pause");
	
		}
	
		if (state == GameState.GAME_FINISHED) {
			saveButton.setEnabled(false);
			loadButton.setEnabled(false);
			getEditorButton().setEnabled(false);
			startButton.setText("Restart");
		}
	
	
		if(state == GameState.GAME_PAUSED) {
			getEditorButton().setEnabled(false);
			getStartButton().setText("Continue");
	
			getSaveButton().setEnabled(true);
			getLoadButton().setEnabled(true);
			getEditorButton().setEnabled(false);	
		}
	
		if(state == GameState.MENU) {
			getStartButton().setText("Start");
			getEditorButton().setText("Level Editor");
			getSaveButton().setText("Save Game");
			getLoadButton().setText("Load Game");
			getEditorButton().setEnabled(true);
			getStartButton().setEnabled(true);
			getStopButton().setEnabled(true);
			getSaveButton().setEnabled(true);
			getLoadButton().setEnabled(true);
		}
	
		//store the new GameState
		this.oldState = PacMan.getGame().getGameState();
	}

	/**
	 * Sets the focus on the panel, so it can capture keyboard input.
	 */
	private void focusGraphicsPanel() {
		graphicsPanel.requestFocus();
	}
}
